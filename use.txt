@ExtendWith(MockitoExtension.class)
public class BankCRSServiceTest {

    @InjectMocks
    private BankCRSService bankCRSService; // Class under test

    @Mock
    private WebServiceTemplate mockCrsTemplate; // Mocked WebServiceTemplate for SOAP call

    @Test
    void testInvokeGetVariableList_Success() throws Exception {
        // Arrange
        VariableListOutputVO mockResponseList = new VariableListOutputVO();
        GetVariablesListResponse getVariablesListResponse = new GetVariablesListResponse();
        getVariablesListResponse.setReturn(mockResponseList);

        when(mockCrsTemplate.marshalSendAndReceive(
                Mockito.any(Object.class),
                Mockito.any(WebServiceMessageCallback.class)
        )).thenReturn(
            new JAXBElement<>(
                new QName("http://ao.CRSEjb.mktsvcs.dfs.com/", "getVariableList"),
                GetVariablesListResponse.class,
                getVariablesListResponse
            )
        );

        // Act
        VariableListOutputVO responseList = bankCRSService.invokeGetVariableList(new VariableListInputVO());

        // Assert
        assertNotNull(responseList);
    }

    @Test
    void testInvokeGetVariableList_NullResponse() {
        // Arrange
        when(mockCrsTemplate.marshalSendAndReceive(
                Mockito.any(Object.class),
                Mockito.any(WebServiceMessageCallback.class)
        )).thenReturn(null);

        // Act & Assert
        DisputeAlmanacServiceException exception = assertThrows(
            DisputeAlmanacServiceException.class,
            () -> bankCRSService.invokeGetVariableList(new VariableListInputVO())
        );

        assertTrue(exception.getMessage().contains("CRS Get Variable List failure"));
    }

    @Test
    void testInvokeGetVariableList_SoapFaultClientException() {
        // Arrange
        when(mockCrsTemplate.marshalSendAndReceive(
                Mockito.any(Object.class),
                Mockito.any(WebServiceMessageCallback.class)
        )).thenThrow(new SoapFaultClientException("SOAP Error"));

        // Act & Assert
        DisputeAlmanacServiceException exception = assertThrows(
            DisputeAlmanacServiceException.class,
            () -> bankCRSService.invokeGetVariableList(new VariableListInputVO())
        );

        assertTrue(exception.getMessage().contains("Exception while invoking CRS Get Variable List API"));
    }

    @Test
    void testInvokeGetVariableList_GeneralException() {
        // Arrange
        when(mockCrsTemplate.marshalSendAndReceive(
                Mockito.any(Object.class),
                Mockito.any(WebServiceMessageCallback.class)
        )).thenThrow(new RuntimeException("Unexpected Error"));

        // Act & Assert
        DisputeAlmanacServiceException exception = assertThrows(
            DisputeAlmanacServiceException.class,
            () -> bankCRSService.invokeGetVariableList(new VariableListInputVO())
        );

        assertTrue(exception.getMessage().contains("Exception while invoking CRS Get Variable List API"));
    }

    @Test
    void testInvokeGetVariableList_OutputValueNull() {
        // Arrange
        GetVariablesListResponse getVariablesListResponse = new GetVariablesListResponse();
        getVariablesListResponse.setReturn(null); // Simulate null response in the "return" value

        when(mockCrsTemplate.marshalSendAndReceive(
                Mockito.any(Object.class),
                Mockito.any(WebServiceMessageCallback.class)
        )).thenReturn(
            new JAXBElement<>(
                new QName("http://ao.CRSEjb.mktsvcs.dfs.com/", "getVariableList"),
                GetVariablesListResponse.class,
                getVariablesListResponse
            )
        );

        // Act & Assert
        DisputeAlmanacServiceException exception = assertThrows(
            DisputeAlmanacServiceException.class,
            () -> bankCRSService.invokeGetVariableList(new VariableListInputVO())
        );

        assertTrue(exception.getMessage().contains("CRS Get Variable List failure"));
    }
}
